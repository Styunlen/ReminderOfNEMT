include "interactive.tis";
event click $(a.theme_enable) {
    console.info("Current theme changes to: {%s}\n",this.parent.parent[0].text);
    options.theme = this.parent.parent[0].text;
    var button_activated = $(.activated);
    button_activated.attributes.removeClass("activated","disabled");
    button_activated.attributes.addClass("theme_enable");
    this.attributes.addClass("activated","disabled");
    return true;
}

event click $(.theme-actions a.button-primary) {
    console.info("Theme {%s}'s preview button clicked\n",this.parent.parent[0].text);
    view.msgbox(#information,"该功能正在加急制作中...","致歉");
    return true;
}

function loadThemeList()
{
    /*
            <div class="theme">
                <div class="theme-screenshot">
                    <img src="/themeName/screenshot.jpg" alt="">
                </div>
                <div class="theme-id-container">
                    <h2 class="theme-name">Demo</h2>
                    <div class="theme-actions">
                        <a class="button theme_enable">启用</a>
                        <a class="button button-primary">实时预览</a>
                    </div>
                </div>
            </div>

            <div class="theme">
                <div class="theme-screenshot">
                    <img src="/themeName/screenshot.jpg" alt="">
                </div>
                <div class="theme-id-container">
                    <h2 class="theme-name">Demo Activated</h2>
                    <div class="theme-actions">
                        <a class="button disabled activated">启用</a>
                        <a class="button button-primary">实时预览</a>
                    </div>
                </div>
            </div>
     */

    //将已安装主题列表的json文本转换成json对象 
    // 列表json文本样例["Circle","Rect","Simple",]
    var themeList = JSON.parse(NA_getThemeList());
    var currentThemeName = NA_getThemeName();//获取当前主题的名字
    //遍历主题列表，并输出到主题浏览器中
    for (var themeName in themeList ) {
        console.log("{%s,%s,%v}\n",themeName,currentThemeName,themeName==currentThemeName);
        var el = Element.create([div: {class:"theme"}]);
        $(.themes).append(el);
        var themeShotPath = NA_getThemeScreenshot(themeName);
        console.log("%s",themeShotPath);
        el.$append(<div class="theme-screenshot"><img src="{themeShotPath}"></div>);
        var el_themeIdContainer = el.$append(<div class="theme-id-container"></div>);    
        el_themeIdContainer.$append(<h2 class="theme-name">{themeName}</h2>);
        var el_themeActions = el_themeIdContainer.$append(<div class="theme-actions"></div>);
        if(themeName == currentThemeName)
        {
            el_themeActions.$append(<a class="button disabled activated">启用</a> <a class="button button-primary">实时预览</a>);
        }
        else{
            el_themeActions.$append(<a class="button theme_enable">启用</a> <a class="button button-primary">实时预览</a>);
        }
    }
    //判断当前启用主题是否为内置主题
    var el_theme_enable = null;
    switch (currentThemeName) {
        case "简约(内置)":
            el_theme_enable = $$(.theme_enable)[2];
            el_theme_enable.attributes.removeClass("theme_enable");
            el_theme_enable.attributes.addClass("activated","disabled");
            console.info("Built-in theme {%s} is used\r\n",currentThemeName);
            break;
        case "矩形(内置)":
            el_theme_enable = $$(.theme_enable)[1];
            el_theme_enable.attributes.removeClass("theme_enable");
            el_theme_enable.attributes.addClass("activated","disabled");
            console.info("Built-in theme {%s} is used\r\n",currentThemeName);
            break;
        case "圆形进度条(内置)":
            el_theme_enable = $$(.theme_enable)[0];
            el_theme_enable.attributes.removeClass("theme_enable");
            el_theme_enable.attributes.addClass("activated","disabled");
            console.info("Built-in theme {%s} is used\r\n",currentThemeName);
            break;
    }
}
loadThemeList();