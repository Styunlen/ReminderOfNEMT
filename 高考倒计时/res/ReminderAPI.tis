include "interactive.tis";

/***************
 变量声明定义区
****************/
var iPer = 0.0; //进度条百分比
var strTimeset = NA_getTime();
var dateTarget = null;
var datePbStart = Date.local(2021, 6, 7, 00, 00, 00); //进度条开始时间

/***************
   API方法区
****************/
IA_debugLogs("----ReminderApi scripts loading...");
function NA_getThemeOption(themeName, optionName)
{
    var ret = null;
    try{
        ret = view.G_NA_getThemeOption(themeName, optionName).toString();
        return ret;
    }
    catch(e)
    {
        ret="NULL";
        NA_debugLogs( String.printf("Sciter Debug Mode,called NA_getThemeOption() with retval: %s",ret) );
        return ret;
    }
}

function NA_saveThemeOption(themeName, optionName, optionValue)
{
    var ret = null;
    try{
        ret = view.G_NA_saveThemeOption(themeName, optionName, optionValue).toString();
        return ret;
    }
    catch(e)
    {
        ret="NULL";
        stdout.println("Sciter Debug Mode,called NA_saveThemeOption() with retval: ",ret);
        return ret;
    }
}

//将数值转成整型
function toInt(i) {
    var res = i.toInteger();
    return res;
}

//初始化目标时间
function timeInit()
{
    var dateNow = new Date();
    //stdout.println(typeof(view.NA_getTime().toString()));
    NA_debugLogs(strTimeset);
    dateTarget = new Date(NA_getTime());
    NA_debugLogs("Time inited successfully!");
    NA_debugLogs( String.printf("timeNow: %s, timeSet: %s\n",dateNow.toString(), dateTarget.toString()) );
}
timeInit();

//更新窗口倒计时
function updateTime() {
    var dateNow = new Date();
    var millisecondsRemaining = dateTarget.valueOf() - dateNow.valueOf();
    var day = currentThemeObj.themeDoc.$(#day);
    var hour = currentThemeObj.themeDoc.$(#hour);
    var min = currentThemeObj.themeDoc.$(#min);
    var sec = currentThemeObj.themeDoc.$(#sec);
    if (millisecondsRemaining >= 0) {
        //Fixed (2020-8-29): 时间算法更新
        iPer = (millisecondsRemaining / (dateTarget.valueOf() - datePbStart.valueOf())) * 100;
        var daysRemaining = millisecondsRemaining / 86400000;
        var hoursR, minR, secR;
        hoursR = toInt((millisecondsRemaining - daysRemaining.toInteger() * 86400000.0) / 3600000.0);
        minR = toInt((millisecondsRemaining - daysRemaining.toInteger() * 86400000.0) / 60000.0 - (hoursR) * 60);
        //Fixed (2021-8-22): 时间算法修复，修复0秒时卡住，然后直接跳到58秒的BUG
        secR = toInt((millisecondsRemaining - daysRemaining.toInteger() * 86400000.0) / 1000.0 - (hoursR) * 3600 - (minR) * 60);
        if(day != undefined)
        {
            day.text = toInt(daysRemaining).toString();
        }
        if(hour != undefined)
        {
            hour.text = (hoursR.toString().length > 1) ? hoursR.toString() : "0" + hoursR.toString();
        }
        if(min != undefined)
        {
            min.text = minR.toString().length > 1 ? minR.toString() : "0" + minR.toString();
        }
        if(sec != undefined)
        {
                sec.text = secR.toString().length > 1 ? secR.toString() : "0" + secR.toString();
        }    
        //stdout.println(iPer, daysRemaining, hoursR, minR, secR);
        body.timer(1000, ::updateTime());
    } else {
       // $(#timeRemaining).html = "<p style=\"font-size:20dip;color:red\">十年寒窗日，只为今日试！<br>祝大家旗开得胜！</p>";
        NA_debugLogs( String.printf("Timeset(%s) has passed!\r\n",dateTarget.toString()) );
        if(day != undefined)
        {
            day.text = "0";
        }
        if(hour != undefined)
        {
            hour.text = "0";
        }
        if(min != undefined)
        {
            min.text = "0";
        }
        if(sec != undefined)
        {
            sec.text = "0";
        }
        return true;
    }
}

//输出调试日志
//IA_debugLogs的别名，作为主题API使用
function debugLogs(logs) {
    IA_debugLogs(logs);
}

//判断当前元素是不是父元素的子代元素
function EleIsChild(child,parent)
{
    //stdout.println("paras==  parent ele:",parent,"child ele:",child);
    if(typeof(parent) != #Element || typeof(child)!=#Element)
    {
        return false;
    }
    //自己也是自己的子代
    if(child==parent)
    {
        return true;
    }
    var count = 0;
    while(child.parent != parent)
    {
        child = child.parent;
        //stdout.println("parent ele of current child: ",child);
        if(child==null || count++ > 100)
        {
            return false;
        }
    }
    return true;
}

//检查软件渲染模式
function checkGfx() {
    if (!view.backend) view.msgbox(#alert, "Failed to initialize layered window!");
    return ["Unknown", "GDI+", "D2D/WARP", "D2D/DX"][view.backend];
}

IA_debugLogs("----ReminderApi loaded successfully!!");