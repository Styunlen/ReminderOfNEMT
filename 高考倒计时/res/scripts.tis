/*
API引用区
 */
include "ReminderAPI.tis";

/***************
 变量声明定义区
****************/
const body = $(body);

/***************
   自定义方法区
****************/
function self.ready() {
    // positioning in the middle of the screen:
    stdout.println("Current WorkDir: ", NA_getWorkDir());
    stdout.println("Current WindowTheme: ", NA_getThemeName());
    body.timer(1s, ::IA_loadTheme(NA_getThemeName()));
}

/***************
 窗口事件处理区
****************/
function onWinStateChange() {
    if (view.state == View.WINDOW_SHOWN) {
        stdout.println("233");
        body.attributes.removeClass("hidden");
        body.attributes.addClass("shown");
    }
    if (view.state == View.WINDOW_MINIMIZED) {
        stdout.println("qwq");
        body.attributes.removeClass("shown");
        body.attributes.addClass("hidden");
    }
}

function onWinClosing() {
    body.onAnimationEnd = ::view.close();
    body.attributes.removeClass("shown");
    return false;
}

function movable(ele) // install movable window handler
{
    var xoff, yoff;
    var dragging = false;
    var movableArea = $(body);
    if(ele instanceof Element)
    {
        movableArea = ele;
    }
    stdout.print("MovableArea:");
    stdout.print(movableArea);
    stdout.printf(" paras: %s\r\n",ele);
    function doDrag() {
        while (dragging) {
            var (x,y) = view.box(#position,#border,#screen);
            stdout.printf("Border(x:%d,y:%d)",x,y);
            (x,y) = view.box(#position,#client,#screen);
            stdout.printf(",Client(x:%d,y:%d)\n",x,y);
            view.doEvent();
        }
    }

    function onMouseDown(evt) {
        stdout.println(evt.target,EleIsChild(evt.target,$(section#sec_menu)));
        if (evt.target !== movableArea && !(EleIsChild(evt.target,movableArea)) || EleIsChild(evt.target,$(section#sec_menu))) return false;
        xoff = evt.x;
        yoff = evt.y;
        dragging = true;
        view.root.capture(true);
        doDrag();
        return true;
    }

    function onMouseMove(evt) {
        if (dragging) {
            view.move(evt.xScreen - xoff, evt.yScreen - yoff, true); // true - x,y are coordinates of the client area on the screen
            return true;
        }
        return false;
    }

    function stopDrag() {
        if (dragging) {
            dragging = false;
            view.root.capture(false);
            return true;
        }
        return false;
    }

    function onMouseUp(evt) {
        return stopDrag();
    }
    function onKeyDown(evt) {
        if (evt.keyCode == Event.VK_ESCAPE) return stopDrag();
    }

    // hookup event handlers:
    view.root.subscribe(onMouseDown, Event.MOUSE, Event.MOUSE_DOWN);
    view.root.subscribe(onMouseUp, Event.MOUSE, Event.MOUSE_UP);
    view.root.subscribe(onMouseMove, Event.MOUSE, Event.MOUSE_MOVE);
    view.root.subscribe(onKeyDown, Event.KEY, Event.KEY_DOWN);
    return false;
}

//使得程序可拖动
movable($(section#sec_main));

self.on("complete",
function() {  
    stdout.println("got complete");
});