/*
API引用区
 */
include "ReminderAPI.tis";

/***************
 变量声明定义区
****************/
const body = $(body);

/***************
   自定义方法区
****************/
//检查是否有新公告
function checkAmUpdate(data,status)
{
    try{    
        var announcement = JSON.parse(data);
        console.info("LastAnnouncementUpdate:", NA_getThemeOption("App","LastAnnouncementUpdate"));
        if(NA_getThemeOption("App","LastAnnouncementUpdate")=="NULL"
        || NA_getThemeOption("App","LastAnnouncementUpdate")!=announcement.updated_at)
        {           
            var pubTime = new Date(announcement.updated_at).toLocaleString();
            console.info("LatestAnnouncementUpdate:", announcement.updated_at, pubTime);
            var ret = view.msgbox(#information,String.printf("新公告于%s发布啦，是否打开设置页面查看？",pubTime),"提醒",[{id:#yes,text:"好的"},{id:#no,text:"下次一定"},{id:#cancel,text:"此公告不再提醒"}]);
            switch(ret)
            {
                case #cancel:
                    NA_saveThemeOption("App","LastAnnouncementUpdate",announcement.updated_at);
                    break;
                case #yes:
                    console.log(self.url("win_setting.html"));
                    view.window({
                        url: self.url("win_setting.html"),
                        type:View.FRAME_WINDOW,
                        alignment: -5,
                        parameters:{hostview: view,startIndex:4,announcement:data}
                    });
                    break;
            }
        }
    }catch(ex){
        var errTime = new Date().toString("%T");
        console.err( String.printf("尝试检查新公告失败。错误代码:%s\r\n",ex.message) );   
    }
}

function checkAmUpdateErr(err,status)
{
    console.err( String.printf("获取公告失败。错误代码:%s,HTTP状态码:%v",err.message,status) );
}

function self.ready() {
    // positioning in the middle of the screen:
    console.log("Current WorkDir: ", NA_getWorkDir());
    console.log("Current WindowTheme: ", NA_getThemeName());
    body.timer(1s, ::IA_loadTheme(NA_getThemeName()));
    view.request({
        type: #get,
        url:  "https://api.github.com/repos/Styunlen/ReminderOfNEMT/issues/3",
        success: checkAmUpdate,
        error:   checkAmUpdateErr,
        headers:{Authorization: "token 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"},
        output:  #string,
        noCache: true,
    });//只考虑成功时的情况，若获取失败，则不执行检查函数
}

/***************
 窗口事件处理区
****************/
function onWinStateChange() {
    if (view.state == View.WINDOW_SHOWN) {
        stdout.println("233");
        body.attributes.removeClass("hidden");
        body.attributes.addClass("shown");
    }
    if (view.state == View.WINDOW_MINIMIZED) {
        stdout.println("qwq");
        body.attributes.removeClass("shown");
        body.attributes.addClass("hidden");
    }
}

function onWinClosing() {
    body.onAnimationEnd = ::view.close();
    body.attributes.removeClass("shown");
    return false;
}

function movable(ele) // install movable window handler
{
    var xoff, yoff;
    var dragging = false;
    var movableArea = $(body);
    if(ele instanceof Element)
    {
        movableArea = ele;
    }
    console.log("MovableArea:%s paras: %s\r\n",movableArea,ele);
    function doDrag() {
        while (dragging) {
            var (x,y) = view.box(#position,#border,#screen);
            var str = String.printf("Border(x:%d,y:%d)",x,y);
            (x,y) = view.box(#position,#client,#screen);
            str += String.printf(",Client(x:%d,y:%d)",x,y);
            console.log(str);
            view.doEvent();
        }
    }

    function onMouseDown(evt) {
        console.log("%s %s",evt.target,EleIsChild(evt.target,$(section#sec_menu)));
        if (evt.target !== movableArea && !(EleIsChild(evt.target,movableArea)) || EleIsChild(evt.target,$(section#sec_menu))) return false;
        xoff = evt.x;
        yoff = evt.y;
        dragging = true;
        view.root.capture(true);
        doDrag();
        return true;
    }

    function onMouseMove(evt) {
        if (dragging) {
            view.move(evt.xScreen - xoff, evt.yScreen - yoff, true); // true - x,y are coordinates of the client area on the screen
            return true;
        }
        return false;
    }

    function stopDrag() {
        if (dragging) {
            dragging = false;
            view.root.capture(false);
            return true;
        }
        return false;
    }

    function onMouseUp(evt) {
        return stopDrag();
    }
    function onKeyDown(evt) {
        if (evt.keyCode == Event.VK_ESCAPE) return stopDrag();
    }

    // hookup event handlers:
    view.root.subscribe(onMouseDown, Event.MOUSE, Event.MOUSE_DOWN);
    view.root.subscribe(onMouseUp, Event.MOUSE, Event.MOUSE_UP);
    view.root.subscribe(onMouseMove, Event.MOUSE, Event.MOUSE_MOVE);
    view.root.subscribe(onKeyDown, Event.KEY, Event.KEY_DOWN);
    return false;
}

//使得程序可拖动
movable($(section#sec_main));

self.on("complete",
function() {  
    console.info("got complete");
});