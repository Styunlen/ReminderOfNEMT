
/*
前后端交互用脚本文件
所有函数前缀均为IA（交互的意思）
因为这些位于交互层的代码，是前端与后端之间的桥梁与纽带
有的与前端交互，直接操作UI，有的则与后端交互，负责数据传输
 */
 
/***************
 变量声明定义区
****************/
var currentThemeObj = {
    themeName:null,
    themeDoc:null
};
var themeView = $(frame#theme_view);


/***************
     方法区
****************/
//加载主题文件
function IA_loadTheme(themeName)
{
    var currentThemeUrl = "this://app/themes/Simple/main.html"; //The Default Theme is Simple 默认简约主题
    try{       
        currentThemeUrl= "file://" +  NA_getWorkDir() + "/themes/"+themeName+"/main.html";
        stdout.println("Try To Load Theme :", currentThemeUrl);
        themeView.load(currentThemeUrl);
        if(themeView[0] == #undefined)
        {
            throw {message:"主题文件不存在,文件路径:",stackTrace:currentThemeUrl};
        }
        currentThemeObj.themeName = themeName;
        currentThemeObj.themeDoc = themeView[0];
        try{
            currentThemeObj.themeDoc.ns.theme_inited();
            stdout.println("Theme loaded successfully!!");
            view_Update();
        }catch(e)
        {
            stdout.println("Theme inited with exception");
            stdout.println("err msg:",e.message,e.stackTrace);
        }       
    }
    catch(e)
    {
        currentThemeUrl = "this://app/themes/";
        switch (themeName) {
            case "简约(内置)":
                stdout.println("Using built-in theme:",themeName);
                currentThemeUrl += "Simple/main.html";
                break;
            case "矩形(内置)":
                stdout.println("Using built-in theme:",themeName);
                currentThemeUrl += "Rect/main.html";
                break;
            case "圆形进度条(内置)":
                stdout.println("Using built-in theme:",themeName);
                currentThemeUrl += "Circle/main.html";
                break;
            default:
                currentThemeUrl += "Simple/main.html";
                NA_setThemeName("简约(内置)");//设置主题为内置主题
                stdout.println("Load theme failed,using default built-in theme: 简约");
                stdout.println("err msg:",e.message,e.stackTrace);
                break;
                
        }
        stdout.println("Try to load built-in theme :",self.url(currentThemeUrl));
        themeView.load(self.url(currentThemeUrl));
        currentThemeObj.themeName = themeName;
        currentThemeObj.themeDoc = themeView[0];
        currentThemeObj.themeDoc.ns.theme_inited();
        stdout.println("Theme loaded successfully!!");
        view_Update();
    }
}

//加载完主题后，需要及时调整窗体大小
function view_Update()
{   
    if( currentThemeObj.themeDoc )
    {
        var title = currentThemeObj.themeDoc.$(head>title);
        view.windowCaption = "高考倒计时——" + title.text;
        stdout.println("Add theme title to windowCaption:",title.text);
    }
    var (sx, sy, sw, sh) = view.screenBox(#workarea, #rectw);
    /*var (tw, th) = currentThemeObj.themeDoc?currentThemeObj.themeDoc.$(body).box(#dimension):(0,0); //theme window size
    stdout.println(tw,th);
    tw += tw / 2; // to accomodate expanding radii
    th += th / 2;
    stdout.println(tw,th);*/
    var (w,h)= currentThemeObj.themeDoc?currentThemeObj.themeDoc.$(body).box(#dimension):(200,200); //app window size without theme window
    if(currentThemeObj.themeDoc.$(body))
    {
        $(#theme_view).style#width = String.printf("%d",w);
        $(#theme_view).style#height = String.printf("%d",h);
    }
    stdout.println(w,h);
    w += w / 2;
    h += h / 2;
    h += 108;//增高窗口来容纳设置按钮
    //stdout.println(w,h);
    //默认最小窗口大小
    if(w<100)
    {
        stdout.println(w);
        w=100;
    }
    if(h<100)
    {
        stdout.println(h);
        h=100;
    }
    var pos = NA_getPos().split(',');
    if(pos.length > 1)
    {
        stdout.print("Restore the last Window Position ");
        stdout.println("x:",pos[0],",y:",pos[1]);
        view.move(pos[0].toInteger(),pos[1].toInteger(),w,h);
    }
    else
    {
        stdout.print("Default display in the center of the screen");
        view.move(sx + (sw - w) / 2, sy + (sh - h) / 2, w, h);
    }
    stdout.printf("sx:%d,sy:%d,sw:%d,sh:%d,w:%d,h:%d\n",sx,sy,sw,sh,w,h);
    stdout.printf("(sx + (sw - w) / 2): %d ,(sy + (sh - h) / 2): %d\n",sx + (sw - w) / 2, sy + (sh - h) / 2);
    view.windowIcon = "./favicon.ico";
    stdout.println(checkGfx());
    $(body).attributes.addClass("shown");
    view.on("statechange", onWinStateChange);
    view.on("closing", onWinClosing);
}

function IA_debugLogs(logs)
{
    stdout.println(logs);
}
//用于开启窗体UI调试
function IA_uiDebugMode(isEnabled)
{
    var debugStyleUrl = "./style_debug.css"; //The Default Theme is Circle 默认圆形窗口主题
    var uiDebugStyle = $(style#ui-debug);
    if(isEnabled)
    {
        uiDebugStyle.deactivate();
        uiDebugStyle.attributes["src"] = debugStyleUrl;
        uiDebugStyle.activate();
    }
    else
    {
        uiDebugStyle.deactivate();
        uiDebugStyle.attributes["src"] = null;
        uiDebugStyle.activate();
    }
}

/*
添加调试代码区
如果在Sciter中调试运行，则返回测试数据
否则，则与后端交互获得数据
 */

 //这个函数用于将C++的函数定义到全局作用域，从而使得所有窗口即C++或脚本创建的窗口都可以访问公开的C++函数
 //解决措施来源于Sciter论坛：https://sciter.com/forums/topic/how-to-cal-host-when-i-create-a-new-window/
function NA_inited(){
    var thisView = view;
   // define global class method:
   try{
        thisView.NA_getWorkDir();
        //如果全局函数与C++函数同名，会导致递归调用而爆栈，所以为全局函数添加前缀
        //然后将在下面和在API中定义的所有NA_函数try语句块中的view.NA_改为view.G_NA (可参考NA_getTime中的代码变更)
        //这样子在子窗口中调用NA_函数也可以正常运行了
        View.G_NA_getWorkDir = function() { return thisView.NA_getWorkDir(); };
        View.G_NA_getThemeName = function() { return thisView.NA_getThemeName(); }
        View.G_NA_getTime = function() { return thisView.NA_getTime(); };
        View.G_NA_setThemeName = function(themeName) { return thisView.NA_setThemeName(themeName); };
        View.G_NA_setTime = function(time) { return thisView.NA_setTime(time); };
        View.G_NA_getPos = function() { return thisView.NA_getPos(); };
        View.G_NA_setPos = function(pos) { return thisView.NA_setPos(pos); };
        View.G_NA_saveThemeOption = function(themeName, optionName, optionValue) { return thisView.NA_saveThemeOption(themeName, optionName, optionValue); };
        View.G_NA_getThemeOption = function(themeName, optionName) { return thisView.NA_getThemeOption(themeName, optionName); };
        View.G_NA_getThemeList = function() { return thisView.NA_getThemeList(); };
        stdout.println("Native functions was defined in global View successfully");
   }catch(e){
        stdout.println("NA_inited was called in sciter");
   }
}
NA_inited();

//通过C++获取配置中时间
function NA_getTime()
{
    var ret = null;
    try{
        ret = view.G_NA_getTime().toString();
        if(ret == "NULL")
        {
            ret="2022-06-07T00:00:00+08:00";
        }
        return ret;
    }
    catch(e)
    {
        ret="2022-06-07T00:00:00+08:00";
        stdout.println("Sciter Debug Mode,called NA_getTime() with retval: 2022-06-07T00:00:00+08:00");
        return ret;
    }
}

//通过C++设置时间
function NA_setTime(time)
{
    try{
        view.G_NA_setTime(time);
        return true;
    }
    catch(e)
    {
        stdout.println("Sciter Debug Mode,called NA_setTime() with para: ",time);
        return false;
    }
}

function NA_getPos()
{
    var ret = null;
    try{
        ret = view.G_NA_getPos().toString();
        return ret;
    }
    catch(e)
    {
        ret="NULL";
        stdout.println("Sciter Debug Mode,called NA_getPos() with retval: NULL");
        return ret;
    }
}

function NA_setPos(pos)
{
    try{
        view.G_NA_setPos(pos);
        return true;
    }
    catch(e)
    {
        stdout.println("Sciter Debug Mode,called NA_setPos() with para: ",pos);
        return false;
    }
}

function NA_getThemeName()
{
    var ret = null;
    try{
        ret = view.G_NA_getThemeName().toString();
        return ret;
    }
    catch(e)
    {
        ret="Circle";
        stdout.println("Sciter Debug Mode,called NA_getThemeName() with retval:", ret);
        return ret;
    }
}

function NA_setThemeName(themeName)
{
    try{
        view.G_NA_setThemeName(themeName);
        return true;
    }
    catch(e)
    {
        stdout.println("Sciter Debug Mode,called NA_setThemeName() with para: ",themeName);
        return false;
    }
}

function NA_getWorkDir()
{
    var ret = null;
    try{
        ret = view.G_NA_getWorkDir().toString();
        return ret;
    }
    catch(e)
    {
        ret=System.home();
        stdout.println("Sciter Debug Mode,called NA_getWorkDir() with retval: ",ret);
        return ret;
    }
}

//返回主题安装目录（绝对路径）
function NA_getThemesDir()
{
    var ret = null;
    try{
        ret = view.G_NA_getWorkDir().toString();
        ret += "\\themes\\";
        return ret;
    }
    catch(e)
    {
        ret=System.home();
        ret += "\\themes\\"
        stdout.println("Sciter Debug Mode,called NA_getThemesDir() with retval: ",ret);
        return ret;
    }
}

//返回当前主题的目录（绝对路径）
function NA_getCurrentThemeDir()
{
    var ret = null;
    try{
        ret = NA_getThemesDir();
        ret += "\\themes\\";
        ret += NA_getThemeName();
        ret += "\\";
        return ret;
    }
    catch(e)
    {
        ret=System.home();
        ret += "\\themes\\Circle\\"
        stdout.println("Sciter Debug Mode,called NA_getCurrentThemeDir() with retval: ",ret);
        return ret;
    }
}

function NA_getThemeList()
{
    var ret = null;
    try{
        ret = view.G_NA_getThemeList().toString();
        if(ret == "NULL")
            ret = '["Circle","Rect","Simple",]';
        return ret;
    }
    catch(e)
    {
        stdout.println("err msg:",e.message,e.stackTrace);
        ret='["Circle","Rect","Simple",]';
        stdout.println("Sciter Debug Mode,called NA_getThemeList() with retval: ",ret);
        return ret;
    }
}

stdout.println("Interactive scripts loaded successfully!!");