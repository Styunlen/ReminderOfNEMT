
/*
前后端交互用脚本文件
所有函数前缀均为IA（交互的意思）
因为这些位于交互层的代码，是前端与后端之间的桥梁与纽带
有的与前端交互，直接操作UI，有的则与后端交互，负责数据传输
 */
 
/***************
 变量声明定义区
****************/
var currentThemeObj = {
    themeName:null,
    themeDoc:null
};
var themeView = $(frame#theme_view);


/***************
     方法区
****************/
//加载主题文件
function IA_loadTheme(themeName)
{
    var currentThemeUrl = "./themes/Circle/main.html"; //The Default Theme is Circle 默认圆形窗口主题
    try{
        stdout.println("Try To Load Theme :","/themes/"+themeName+"/main.html");
        currentThemeUrl= "file://" +  NA_getWorkDir() + "/themes/"+themeName+"/main.html";
        themeView.load(currentThemeUrl);
        currentThemeObj.themeName = themeName;
        currentThemeObj.themeDoc = themeView[0];
        currentThemeObj.themeDoc.ns.theme_inited();
        view_Update();
        stdout.println("Theme loaded successfully!!");
    }
    catch(e)
    {
        stdout.println("Load Theme Failed,Using Default Theme Circle");
        stdout.println("err msg:",e.message,e.stackTrace);
        stdout.println("Try To Load Theme :",self.url("res:themes/Circle/main.html"));
        themeView.load(self.url("res:themes/Circle/main.html"));
        currentThemeObj.themeName = themeName;
        currentThemeObj.themeDoc = themeView[0];
        currentThemeObj.themeDoc.ns.theme_inited();
        view_Update();
        stdout.println("Theme loaded successfully!!");
    }
}

//加载完主题后，需要及时调整窗体大小
function view_Update()
{
    var (sx, sy, sw, sh) = view.screenBox(#workarea, #rectw);
    var (w, h) = currentThemeObj.themeDoc.$(body).box(#dimension);
    w += w / 2; // to accomodate expanding radii
    h += h / 2;
    var pos = NA_getPos().split(',');
    if(pos.length > 1)
    {
        stdout.print("Restore the last Window Position ");
        stdout.println("x:",pos[0],",y:",pos[1]);
        view.move(pos[0].toInteger(),pos[1].toInteger(),w,h);
    }
    else
    {
        stdout.print("Default display in the center of the screen");
        view.move(sx + (sw - w) / 2, sy + (sh - h) / 2, w, h);
    }
    stdout.printf("sx:%d,sy:%d,sw:%d,sh:%d,w:%d,h:%d\n",sx,sy,sw,sh,w,h);
    stdout.printf("(sx + (sw - w) / 2): %d ,(sy + (sh - h) / 2): %d\n",sx + (sw - w) / 2, sy + (sh - h) / 2);
    view.windowIcon = "./favicon.ico";
    //stdout.println(checkGfx());
    body.timer(1s, ::this.attributes.addClass("shown"));
}

function IA_debugLogs(logs)
{
    stdout.println(logs);
}
//用于开启窗体UI调试
function IA_uiDebugMode(isEnabled)
{
    var debugStyleUrl = "./style_debug.css"; //The Default Theme is Circle 默认圆形窗口主题
    var uiDebugStyle = $(style#ui-debug);
    if(isEnabled)
    {
        uiDebugStyle.deactivate();
        uiDebugStyle.attributes["src"] = debugStyleUrl;
        uiDebugStyle.activate();
    }
    else
    {
        uiDebugStyle.deactivate();
        uiDebugStyle.attributes["src"] = null;
        uiDebugStyle.activate();
    }
}

/*
添加调试代码区
如果在Sciter中调试运行，则返回测试数据
否则，则与后端交互获得数据
 */
function NA_getTime()
{
    var ret = null;
    try{
        ret = view.NA_getTime().toString();
        return ret;
    }
    catch(e)
    {
        ret="2022-06-07T00:00:00+08:00";
        stdout.println("Sciter Debug Mode,called NA_getTime() with retval: 2022-06-07T00:00:00+08:00");
        return ret;
    }
}
function NA_getPos()
{
    var ret = null;
    try{
        ret = view.NA_getPos().toString();
        return ret;
    }
    catch(e)
    {
        ret="NULL";
        stdout.println("Sciter Debug Mode,called NA_getPos() with retval: NULL");
        return ret;
    }
}
function NA_getThemeName()
{
    var ret = null;
    try{
        ret = view.NA_getThemeName().toString();
        return ret;
    }
    catch(e)
    {
        ret="Circle";
        stdout.println("Sciter Debug Mode,called NA_getThemeName() with retval: Circle");
        return ret;
    }
}

function NA_getWorkDir()
{
    var ret = null;
    try{
        ret = view.NA_getWorkDir().toString();
        return ret;
    }
    catch(e)
    {
        ret=System.home();
        stdout.println("Sciter Debug Mode,called NA_getWorkDir() with retval: ",ret);
        return ret;
    }
}

function NA_setPos(pos)
{
    try{
        view.NA_setPos(pos);
        return true;
    }
    catch(e)
    {
        stdout.println("Sciter Debug Mode,called NA_setPos() with para: ",pos);
        return false;
    }
}
function NA_setThemeName(themeName)
{
    try{
        view.NA_setThemeName(themeName);
        return true;
    }
    catch(e)
    {
        stdout.println("Sciter Debug Mode,called NA_setThemeName() with para: ",style);
        return false;
    }
}

function NA_setTime(time)
{
    try{
        view.NA_setTime(time);
        return true;
    }
    catch(e)
    {
        stdout.println("Sciter Debug Mode,called NA_setTime() with para: ",time);
        return false;
    }
}